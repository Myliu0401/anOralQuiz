/* 

    当代码执行进入一个环境时，会为该环境创建一个执行上下文，它会在运行代码前作一些准备工作，如确定作用域，创建局部变量对象等


    js中的执行环境
       全局环境
       函数环境
       eval函数环境
    那么与之对应的执行上下文类型同样有3中
       全局执行上下文
       函数执行上下文
       eval函数执行上下文

 
    
    执行上下文生命周期
      创建阶段：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段

      执行阶段：执行函数中代码时，此时执行上下文进入执行阶段

    创建阶段： 
      创建变量对象*VO*
         确定函数的形参
         函数环境会初始化创建 arguments对象并赋值
         确定普通字面量函数声明并赋值
         变量声明，函数表达式声明（在进行变量声明的时候，如果发现该变量已经存在，则不会再声明）
      确定this指向
      确定作用域

*/




const foo = function (i){
   var a = 'hello';
   var b = function kk(){};
   function c(){};
};

foo(10);

// 生成一个 foo 函数上下文环境
// 创建上下文阶段
/* 
    foo函数的上下文环境 = {
        VO: { // 也就是AO
            i: 10,  确定函数的形参
            arguments: { 0: 10, length: 1 }, 初始化创建 arguments对象并赋值
            c: 函数  确定普通字面量函数声明并赋值
            a: undefined   变量声明，函数表达式声明
            b: undefined   变量声明，函数表达式声明
        },
        this,
        作用域
    }



*/

// 执行阶段
/* 
   VO: {
      a: hello  进行赋值
      b: 函数   进行赋值
   }


*/
