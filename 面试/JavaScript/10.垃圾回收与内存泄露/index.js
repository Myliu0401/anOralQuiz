/* 
       什么事内存泄露
          程序运行需要内存，只要程序提出要求，操作系统就必须供给内存。
          对于持续运行的进程，必须及时释放不再用到的内存，否则累计越高就会泄露

      
       JS垃圾回收
          浏览器JS具有垃圾回收机制，其原理是：垃圾收集器会定时（周期性）找出那些不再继续使用的变量，然后将其释放掉


       标记清除
          JS中最常用的垃圾回收方式就是标记清除
          当变量进入环境时，列如，在函数中声明一个变量，就将这个变量标记为*进入环境*
          从逻辑上讲，永远不能释放*进入环境*的变量手占用的内存，因为只要执行流进入相应的环境，就可能会被用到。
          而当变量离开环境时，则将其标记为*离开环境*
          function test(){
            var a = 10; 被标记为 进入环境
            var b = 20; 被标记为 进入环境
          }

          test(); 执行完毕后 a、b 又会被标记为 离开环境

          收回器会回收掉  *离开环境的数据*



       引用计数
          引用计数的含义是跟踪记录每个值被引用的次数
          当声明了一个变量并将一个引用类型值赋给变量时，则这个值得引用次数就是1，如果同一个值又被赋值给另一个变量，
            则该直的引用次数加1
          相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值得引用次数减1，当这个值得引用次数变为0时，说明后续没有
            办法再访问这个值了，因而就可以将其占用的内存空间回收

         function test(){
            var a = {}   a 指向对象的引用次数为1
            var b = a    a 指向对象的引用次数加1
            var c = a    a 指向对象的引用次数再加1
            var b = {}   a 指向对象的引用次数减1
         }

          引用计数存在一个严重的问题： 循环引用
           详情 看课件
*/