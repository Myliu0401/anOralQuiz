/* 
       TCP协议在传输层

           TCP收发数据流程
             建立链接（三次握手）
             收发数据
             销毁链接（四次挥手）
     

           TCP收发数据
               分段发送
                 如果数据量过大，则不会一次性发送过去，会分为一小段一小段的发送，每一小段都会带个头部。 
 
               可靠传输
                 在TCP协议中，任何时候、任何一方都可以主动发送数据给另一方。
                  （http协议，只能由客户端发起，http协议是建立在tcp协议基础上的）
                 为了解决数据报丢失、数据报错乱等问题，TCP协议要求：接收方收到数据报后，必须对数据报进行确认。
                 发送每一小段都会带个头部，头部中就包含信息：
                     seq: 表示这小段是整个数据的第几部分
                     ACK: 表示这次数据报是一个确认数据报
                     ack: 表示期望下一次接收的数据报序号
                  接收方收到消息后，将头部中的 ACK、ack 发回给发送方 表示已经确认
                  发送方如果长时间没有收到确认数据报，则会判定丢失或者是错误，然后重发该数据报


                建立链接（三次握手）
                   链接的本质就是双方各自开辟一块内存空间，空间中主要是数据缓冲区和一些变量
                   服务器会监听一个端口

                  1. 客户端发起一块数据报到服务端，数据报中头部会带着 SYN=1 （表示想要建立链接能听到吗，此时客户端进行 SYN_SENT状态）
                  2. 服务端发回 SYN=1、ACK=1 给客户端 （服务端表示 能听到，你那边能听到吗。完成后服务端进入 SYN_SENT状态，客户端进入完成状态）
                  3. 客户端再发送 ACK=1 给服务端 （客户端表示 能听到。完成后 服务端也进入完成状态）

                  3次对话完成后，通道建立



                销毁链接通道（四次挥手）
                  销毁链接，任何一方都可以发出销毁链接请求
                  
                  客户端 发送数据报给（头部中有 FIN=1） 服务端，客户端发送后进入 FIN-WAIT-1状态
                  服务端 收到消息后进入 CLOSE-WAIT状态，并且发回给客户端表示确认 头部中有 ACK=1 （表示消息已收到，但先等一会）
                  客户端 收到后进入 FIN-WAIT状态, 进行等待
                  服务端 会再发送给客户端 头部中有 FIN=1、ACK=1 （发送完后 服务端进入LAST-ACK状态，客户端进入TIME-WAIT状态）
                  客户端 发回给服务端 头部中带有 ACK=1,（服务端收到消息后会断开）
                  客户端 会等待一段时间后才断开（主要是防止发送不过去）



                  

*/